import{useCallback}from'react';import useMaterial3DCore from'./core';import{getElementColor}from'../../../utils/index';import{Ligand}from'../types';import{traverseAtoms,AtomHierarchy}from'dpmol';function calculateVolume(a:number[],b:number[],c:number[]){const crossProduct=[b[1]*c[2]-b[2]*c[1],b[2]*c[0]-b[0]*c[2],b[0]*c[1]-b[1]*c[0]];const dotProduct=a[0]*crossProduct[0]+a[1]*crossProduct[1]+a[2]*crossProduct[2];const volume=Math.abs(dotProduct);return volume}const useMaterial3DState=()=>{const{coreRef,extraColorTableRef,uuidRef,lightPluginRef}=useMaterial3DCore();const getLigands=useCallback(async(biology=false)=>{const elements=new Set<string>();const ligands:Array<Ligand>=[];if(typeof coreRef.current?.data==='string'||lightPluginRef.current?.managers.trajectory.getTrajectoryCell(uuidRef.current)?.length){const structure=await lightPluginRef.current?.managers.cell.getStructure(uuidRef.current);traverseAtoms(structure,(atom:AtomHierarchy)=>{elements.add(atom.typeSymbol)})}else{coreRef.current?.origin?.atoms.forEach(atom=>{elements.add(atom.element)})}elements.forEach(element=>{ligands.push({element,color:getElementColor(element,{biology,extraColorTable:extraColorTableRef.current,}),})});return ligands},[]);const getLattice=useCallback(()=>{if(lightPluginRef.current?.managers.trajectory.getTrajectoryCell(uuidRef.current)?.length){const lattice=lightPluginRef.current?.managers.trajectory.getTrajectoryLattice(uuidRef.current);if(!lattice)return;return{...lattice,volume:lattice.volume??calculateVolume(lattice.vecA,lattice.vecB,lattice.vecC),spacegroup:{symbol:'P 1',no:1,},}}const lattice=coreRef.current?.origin?.lattice;if(!lattice){return}return lattice},[]);return{getLigands,getLattice,}};export default useMaterial3DState;