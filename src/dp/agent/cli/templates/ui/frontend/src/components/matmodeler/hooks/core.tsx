import{LightPlugin,Format,RepresentationType,ThemeC,Granularity,VisualizationMode,traverseAtoms}from'dpmol';import{Vec3}from'dpmol';import{useCallback,useRef}from'react';import{debounce}from'lodash-es';import{MaterialCore}from'./coreMethod';import{CustomFormatMap,getPointsByVertex,getVertexByVectors,}from'../../../utils/index';import{Bulk}from'../../../utils/bulk';import{ASEDataItem,Lattice}from'../types';import{BehaviorSubject,Subject}from'rxjs';export interface IOuterPromise<T>extends Promise<T>{outerResolve:(value:T|PromiseLike<T>)=>void;outerReject:(reason?:any)=>void}export function OuterPromise<T>(){const promise=new Promise<T>(async(resolve,reject)=>{await Promise.resolve();(promise as IOuterPromise<T>).outerResolve=resolve;(promise as IOuterPromise<T>).outerReject=reject});return promise as IOuterPromise<T>}export const sleep=(duration=0)=>{return new Promise(resolve=>{setTimeout(resolve,duration)})};export async function executeAtLeast(fn:()=>Promise<any>,time:number){const start=Date.now();const res=await fn();const dis=Date.now()-start;if(dis>time){return res}await sleep(time);return res}const useContextValue=()=>{const lightPluginRef=useRef<LightPlugin>();const initPluginPromiseRef=useRef(OuterPromise<LightPlugin>());const coreRef=useRef<MaterialCore|null>();const uuidRef=useRef('');const dataSubjectRef=useRef(new BehaviorSubject<ASEDataItem[]>([]));const formatSubjectRef=useRef(new BehaviorSubject(''));const pluginRefreshSubjectRef=useRef(new Subject<void>());const bondVisibleRef=useRef(true);const reprTypeRef=useRef(RepresentationType.BallAndStick);const extraColorTableRef=useRef<{[k:string]:number}>({});const perTypeRef=useRef('in_cell');const coreChangeSubjectRef=useRef(new Subject<MaterialCore|undefined>());const coreFileChangeSubjectRef=useRef(new Subject<MaterialCore|undefined>());const coreHistoryChangeSubjectRef=useRef(new Subject<MaterialCore|undefined>());const isTrajSubjectRef=useRef(new BehaviorSubject(false));const initPlugin=useCallback((dom:HTMLElement)=>{lightPluginRef.current=new LightPlugin();lightPluginRef.current.createCanvas(dom);lightPluginRef.current.managers.representation.showPolarHydrogenOnly=false;lightPluginRef.current.managers.selection.structure.setGranularity(Granularity.Atom);lightPluginRef.current.mode=VisualizationMode.Material;lightPluginRef.current.managers.trajectory.duration=6;window.__simple_plugin=lightPluginRef.current;Promise.resolve().then(()=>{initPluginPromiseRef.current.outerResolve(lightPluginRef.current!)});const observer=new ResizeObserver(debounce(()=>{lightPluginRef.current?.refresh({fixCamera:true});pluginRefreshSubjectRef.current.next()},300));observer.observe(dom);return function dispose(){observer.disconnect();lightPluginRef.current?.dispose?.()}},[]);const renderAtoms=useCallback(async()=>{const core=coreRef.current;if(!core){return}let data=core.data||core.getMoleculeParam();if(perTypeRef.current!=='in_cell'&&core?.origin?.lattice){const ase=core?.getAse();const length=ase?.atoms?.length||0;data.elements=[...data.elements.slice(0,length)];data.moveFlags=[...data.moveFlags.slice(0,length)];data.xyzs=[...data.xyzs.slice(0,length)]}const format=CustomFormatMap[formatSubjectRef.current.value];const[ref]=await lightPluginRef.current!.managers.representation.createMolecular({format:CustomFormatMap[format]||Format.Material,data,reprType:reprTypeRef.current,theme:{[ThemeC.ATOM]:{color:{name:'material-element-symbol',props:{extraColorTable:extraColorTableRef.current,},},},},autoConvertToTrajectory:true,});console.log('ref',ref,lightPluginRef.current!.managers.representation);const isTraj=!!lightPluginRef.current?.managers.trajectory.getTrajectoryCell(ref).length;isTrajSubjectRef.current.next(isTraj);if(isTraj){const lattice=lightPluginRef.current?.managers.trajectory.getTrajectoryLattice(ref!);if(lattice){await renderCell({...lattice,matrix:[lattice.vecA,lattice.vecB,lattice.vecC]});await setAxes({...lattice,matrix:[lattice.vecA,lattice.vecB,lattice.vecC]})}}uuidRef.current=ref;return ref},[]);const renderTraj=useCallback(async(data:any,format:Format)=>{await lightPluginRef.current!.clear();lightPluginRef.current!.managers.editor.isLockCamera=false;lightPluginRef.current!.managers.representation.hideBond=true;formatSubjectRef.current.next(format);let ref:string;if([Format.Xtc,Format.Trr].includes(format)&&data.groContent){ref=await lightPluginRef.current?.managers.trajectory.import({data:data.groContent,format:Format.Gro,},{data:data.coordsContent,format,},{[ThemeC.ATOM]:{color:{name:'material-element-symbol',props:{extraColorTable:extraColorTableRef.current,},},},})!;uuidRef.current=ref!;isTrajSubjectRef.current.next(true)}const lattice=lightPluginRef.current?.managers.trajectory.getTrajectoryLattice(ref!);const trajCore=new MaterialCore();if(lattice){await renderCell({...lattice,matrix:[lattice.vecA,lattice.vecB,lattice.vecC]});await setAxes({...lattice,matrix:[lattice.vecA,lattice.vecB,lattice.vecC]});trajCore.setByParams({atoms:[],lattice:{...lattice,matrix:[lattice.vecA,lattice.vecB,lattice.vecC]},})}coreRef.current=trajCore;coreChangeSubjectRef.current.next(trajCore);coreFileChangeSubjectRef.current.next(trajCore);coreHistoryChangeSubjectRef.current.next(trajCore)},[]);const renderCell=useCallback(async(lattice?:Lattice,surface?:Bulk)=>{if(!lattice){return}if(!surface){const vertex=getVertexByVectors(lattice.matrix!);const points=getPointsByVertex(vertex);return lightPluginRef.current!.managers.representation.createOther({data:points,type:RepresentationType.CustomLines,params:{alpha:1,},})}const vertex=getVertexByVectors(surface.getCell());const points=getPointsByVertex(vertex);const solidPoints=points.slice(0,4);return lightPluginRef.current!.managers.representation.createOther({data:solidPoints,type:RepresentationType.CustomLines,params:{alpha:1,},})},[]);const setAxes=useCallback((lattice?:Lattice,surface?:Bulk)=>{const defaultParams={vecA:Vec3.unitX,vecB:Vec3.unitY,vecC:Vec3.unitZ,};const params=(()=>{if(!lattice){return{}}const cell=surface?.getCell()||lattice.matrix;return{vecA:Vec3.normalize(Vec3.zero(),Vec3.create.apply(null,cell[0]as[number,number,number])),vecB:Vec3.normalize(Vec3.zero(),Vec3.create.apply(null,cell[1]as[number,number,number])),vecC:Vec3.normalize(Vec3.zero(),Vec3.create.apply(null,cell[2]as[number,number,number])),}})();return lightPluginRef?.current?.canvas3d?.setProps({camera:{helper:{axes:{name:'on',params:{...defaultParams,...params,},},},},})},[]);const render=useCallback(async(core=coreRef.current,params?:{format?:Format;changeCore?:boolean;changeFile?:boolean;changeHistory?:boolean;autoLockCamera?:boolean})=>{params=Object.assign({changeCore:true,changeFile:true,changeHistory:true,autoLockCamera:true,},params);await lightPluginRef.current!.clear();console.log('PluginRef',lightPluginRef.current!.clear,core);if(!core||(!core.origin&&!core.data)){if(params.changeCore){coreChangeSubjectRef.current.next(core!)}return}coreRef.current=core;const lattice=core?.origin?.lattice;if(params.autoLockCamera){lightPluginRef.current!.managers.editor.isLockCamera=true}await renderAtoms();await renderCell(lattice,core.surface);await setAxes(lattice,core.surface)},[]);return{lightPluginRef,initPluginPromiseRef,uuidRef,coreRef,dataSubjectRef,formatSubjectRef,pluginRefreshSubjectRef,reprTypeRef,extraColorTableRef,bondVisibleRef,coreChangeSubjectRef,coreFileChangeSubjectRef,coreHistoryChangeSubjectRef,isTrajSubjectRef,initPlugin,render,renderTraj,}};export default useContextValue;